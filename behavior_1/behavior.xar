<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Input name="orientation/continue" type="0" type_size="1" nature="4" stm_value_name="orientation/continue" inner="1" tooltip="orientation/continue desc" id="4" />
    <Input name="orientation/answerRight" type="0" type_size="1" nature="4" stm_value_name="orientation/answerRight" inner="1" tooltip="orientation/answerRight desc" id="5" />
    <Input name="orientation/answerWrong" type="0" type_size="1" nature="4" stm_value_name="orientation/answerWrong" inner="1" tooltip="orientation/answerWrong desc" id="6" />
    <Input name="Orientation/Exit" type="0" type_size="1" nature="4" stm_value_name="Orientation/Exit" inner="1" tooltip="Orientation/Exit desc" id="7" />
    <Input name="orientation/asked" type="0" type_size="1" nature="4" stm_value_name="orientation/asked" inner="1" tooltip="orientation/asked desc" id="8" />
    <Input name="orientation/say_info" type="0" type_size="1" nature="4" stm_value_name="orientation/say_info" inner="1" tooltip="orientation/say_info desc" id="9" />
    <Input name="orientation/answerContinue" type="0" type_size="1" nature="4" stm_value_name="orientation/answerContinue" inner="1" tooltip="orientation/answerContinue desc" id="10" />
    <Input name="orientation/silence" type="0" type_size="1" nature="4" stm_value_name="orientation/silence" inner="1" tooltip="orientation/silence desc" id="11" />
    <Input name="orientation/info" type="0" type_size="1" nature="4" stm_value_name="orientation/info" inner="1" tooltip="orientation/info desc" id="12" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="13" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Show Web View" id="8" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="577" y="129">
              <bitmap>media/images/box/internet/internet.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self, p):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = p
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                self.logger.info(url)
                tabletService.showWebview()
                tabletService.loadUrl(url)
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("ALTabletService not found.")
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
              <Parameter name="url" inherits_from_parent="0" content_type="3" value="" default_value="quiz_start.html" custom_choice="0" tooltip="" id="4" />
            </Box>
            <Box name="Raise Event" id="2" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="624" y="23">
              <bitmap>media/images/box/sensors/STM.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
              <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
              <Parameter name="key" inherits_from_parent="0" content_type="3" value="Orientation/Exit" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
            </Box>
            <Box name="Score" id="3" localization="8" tooltip="" x="136" y="210">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.right = 0
        self.asked = 0

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_right(self):
        self.right += 1
        right_str = str(self.right)
        self.tts = ALProxy("ALTextToSpeech")
        if self.tts.getLanguage() == "English":
            _url = "en/quiz-end.html?result=" + right_str
        elif self.tts.getLanguage() == "Finnish":
            _url = "fin/quiz-end.html?result=" + right_str
        self.url(_url)

    def onInput_wrong(self):
        right_str = str(self.right)
        self.tts = ALProxy("ALTextToSpeech")
        if self.tts.getLanguage() == "English":
            _url = "en/quiz-end.html?result=" + right_str
        elif self.tts.getLanguage() == "Finnish":
            _url = "fin/quiz-end.html?result=" + right_str
        self.url(_url)]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="right" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Input name="wrong" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
              <Output name="url" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
            </Box>
            <Box name="Show Web View (1)" id="4" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="285" y="211">
              <bitmap>media/images/box/internet/internet.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[feedback_fin = ["Kiitos kun visailit kanssani! Olet onnekas, kun sinulla on vielä niin paljon vierailukohteita Tampereella! Voit katsella lisää kohteita vaikka tuolta näytöltä Visit Tampereen nettisivuilta.",
"Tämä on hieno alku Tampereen nähtävyyksiin tutustumisessa! Toivottavasti ehdit vierailla kesän aikana näissä ja monissa muissakin kohteissa. Lisää löydät esimerkiksi tuon näytön Visit Tampere -nettisivuilta.",
"Ei hassumpaa, tunnistit aika monta kohdetta! Kesän aikana pääset toivottavasti käymään monessa muussakin. Ideoita voit etsiä esimerkiksi Visit Tampereen sivuilta, jotka löytyvät tuolta näytöltä.",
"Varsin hyvä tulos! Voit etsiä näitä tai muita vierailukohteita myös Visit Tampereen nettisivuilta, joita pääset selaamaan tuolla olevalta näytöltä.",
"Mahtavaa, tiesit melkein kaikki! Taidat olla paikallisia?",
"Loistavaa, kaikki oikein! Taidat olla paljasjalkainen tamperelainen!"]

feedback_en = ["Thank you for quizzing with me! You're lucky, you have a lot to discover in Tampere! You can find more about places in Tampere from the Visit Tampere webpage.",
"This is a good start to get familiar with places in Tampere! I hope you get to visit these and other places during the summer! You can find out more from the Visit Tampere webpage.",
"Not bad, you were able to indentify pretty many places! I hope you get to visit other places too during the summer! You can find more ideas from the Visit Tampere webpage.",
"Pretty good! You can find more places from the Visit Tampere website.",
"Super! You seem to know Tampere very well already! If you want to find out more places to visit, you can go to Visit Tampere webpage.", "Amazing! You got almost all right! I'm guessing you are a local!",
"You're the best! You got each question right. I bet you are from here!"]
class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)


    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")

        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("url")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                self.logger.info(url)
                tabletService.showWebview()
                tabletService.loadUrl(url)

                self.tts = ALProxy("ALTextToSpeech")
                self.animation = ALProxy("ALAnimationPlayer")

                if self.tts.getLanguage() == "Finnish":
                    feedback = feedback_fin
                elif self.tts.getLanguage() == "English":
                    feedback = feedback_en

                result = int(url.split("=")[1])
                if result == 0:
                    self.animation.run("animations/Stand/Gestures/Excited_1")
                    self.tts.say(feedback[0])
                elif result < 2:
                    self.animation.run("animations/Stand/Gestures/Great_1")
                    self.tts.say(feedback[1])
                elif result < 4:
                    self.animation.run("animations/Stand/Gestures/Salute_1")
                    self.tts.say(feedback[2])
                elif result < 6:
                    self.animation.run("animations/Stand/Emotions/Positive/Winner_1")
                    self.tts.say(feedback[3])
                elif result < 8:
                    self.animation.run("animations/Stand/Emotions/Positive/Winner_1")
                    self.tts.say(feedback[4])
                elif result == 8:
                    self.animation.run("animations/Stand/Waiting/AirGuitar_1")
                    self.tts.say(feedback[5])

                self.raiseEvent()

            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("ALTabletService not found.")
        self.onStopped()

    def onInput_set(self, url):
        self.logger.info(url)
        self.setParameter("url", url)]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="set" type="3" type_size="1" nature="1" inner="0" tooltip="" id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="raiseEvent" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
              <Parameter name="url" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="6" />
              <Parameter name="result" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="100" tooltip="" id="7" />
            </Box>
            <Box name="Counter" id="5" localization="8" tooltip="" x="139" y="331">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.counter = 1

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.counter += 1
        self.logger.info(self.counter)
        if self.counter < 9:
            memory = ALProxy("ALMemory")
            memory.raiseEvent("orientation/next", 1)
        else:
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Q_counter" id="6" localization="8" tooltip="" x="425" y="88">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.counter = -1
        self.curr_url = ""

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_url(self, p):
        self.counter += 1
        _url = p + "?question=" + str(self.counter)
        self.curr_url = _url
        self.url_out(_url)

    def onInput_voice(self, p):
        _url = str(p) + "?question=" + str(self.counter)
        self.url_out(_url)]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="url" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Input name="voice" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
              <Output name="url_out" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
            </Box>
            <Box name="Say Text" id="7" localization="8" tooltip="Say the text received on its input." x="509" y="364">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def onInput_input(self, p):
        self.tts.say(p)]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Input name="input" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="5" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="6" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Raise Event (1)" id="9" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="410" y="215">
              <bitmap>media/images/box/sensors/STM.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
              <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
              <Parameter name="key" inherits_from_parent="0" content_type="3" value="orientation/allAsked" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" />
            </Box>
            <Box name="Stop Speech" id="10" localization="8" tooltip="" x="515" y="458">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.tts.stopAll()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="quiz_dlg" id="1" localization="8" tooltip="" x="173" y="21">
              <dialogFile>../quiz_dlg/quiz_dlg.dlg</dialogFile>
              <bitmap>media/images/box/box-dialog.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="html" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
              <Output name="voice_ans" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
            </Box>
            <Box name="Say" id="11" localization="8" tooltip="Say some text. The text can be localized." x="643" y="265">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Output name="saynothing" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="6" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="7" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Hello" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="8" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="newbox" id="12" localization="8" tooltip="" x="878" y="233">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("")

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_peppersaidnothing(self):
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="peppersaidnothing" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
            </Box>
            <Box name="Go to position Stand" id="13" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="162" y="538">
              <bitmap>media/images/positions/Stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
              <Resource name="All motors" type="Lock" timeout="0" />
              <Resource name="Stiffness" type="Lock" timeout="0" />
            </Box>
            <Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="4" />
            <Link inputowner="4" indexofinput="3" outputowner="3" indexofoutput="7" />
            <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="7" />
            <Link inputowner="9" indexofinput="2" outputowner="4" indexofoutput="5" />
            <Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="9" />
            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="11" />
            <Link inputowner="3" indexofinput="4" outputowner="0" indexofoutput="5" />
            <Link inputowner="3" indexofinput="5" outputowner="0" indexofoutput="6" />
            <Link inputowner="0" indexofinput="13" outputowner="0" indexofoutput="7" />
            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="8" />
            <Link inputowner="6" indexofinput="4" outputowner="1" indexofoutput="5" />
            <Link inputowner="6" indexofinput="5" outputowner="1" indexofoutput="6" />
            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="12" indexofinput="4" outputowner="11" indexofoutput="5" />
            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
